  #include <iostream>
  #include "Lemonade.hpp"
  #include <cmath>

  int main() {
      Lemon::Log("Hello, Lemon-C World!");
      std::string result = Lemon::concat("Lemon", "-C");
      Lemon::Log(std::to_string(Lemon::pow(2, 3)));

      Lemon::vector<int> numbers = {1, 2, 3, 4};
      for_(i, 0, 5) {
        Lemon::Log("Loop iteration: " + std::to_string(i));
      }

      int counter = 0;
      while_(counter < 3) {
        Lemon::Log("While loop: " + std::to_string(counter));
        counter++;
      }
      int sum = Lemon::add(5, 6);
      Lemon::Log(std::to_string(sum));

      std::string num_str = "12345";
      int num = Lemon::string_to_int(num_str);
      Lemon::Log(std::to_string(num));

      num_str = "abc";
      int num = Lemon::string_to_int(num_str);
      Lemon::Log(std::to_string(num));

      Lemon::Log(std::to_string(Lemon::abs(-10.5)));
      Lemon::Log(std::to_string(Lemon::abs(7)));
      Lemon::Log(std::to_string(Lemon::max(10, 5)));
      Lemon::Log(std::to_string(Lemon::min(10, 5)));

      std::string text = "Hello, world!";
      if (Lemon::contains(text, "world")) {
          Lemon::Log("Found 'world' in the text.");
      } else {
          Lemon::Log("Did not find 'world'.");
      }

      std::string csv_data = "apple,banana,orange";
      std::vector<std::string> fruits = Lemon::split(csv_data, ',');
      for (const auto& fruit : fruits) {
          Lemon::Log(fruit);
      }
      std::string text_to_trim = "   trim me   ";
      std::string trimmed_text = Lemon::trim(text_to_trim);
      Lemon::Log(trimmed_text);

      // Example of using the object system:
      std::shared_ptr<Lemon::object> str_obj = Lemon::create_object("string", "Hello, Lemon-C Object!");
      std::shared_ptr<Lemon::object> num_obj = Lemon::create_object("number", "123.45");
  //    std::shared_ptr<Lemon::object> num_obj2 = Lemon::create_object("number", 567.89");

      if (str_obj) {
          str_obj->print();
          Lemon::Log("Type: " + str_obj->type_name());
      }
      if (num_obj) {
          num_obj->print();
          Lemon::Log("Type: " + num_obj->type_name());
      }
      if (num_obj2) {
          num_obj2->print();
          Lemon::Log("Type: " + num_obj2->type_name());
      }

      // Example of using the class system
      std::shared_ptr<Lemon::person> person1 = Lemon::create_person("Alice", 30);
      std::shared_ptr<Lemon::person> person2 = Lemon::create_person("Bob", 25);

      if (person1) {
          person1->print();
          Lemon::Log("Type: " + person1->type_name());
      }
      if (person2) {
          person2->print();
          Lemon::Log("Type: " + person2->type_name());
      }
      std::shared_ptr<Lemon::circle> circle1 = Lemon::create_circle(5.0);
      if (circle1) {
          circle1->print();
          Lemon::Log("Type: " + circle1->type_name());
          Lemon::Log("Area: " + std::to_string(circle1->get_area()));
      }
      // Example of using the addition operator
      std::shared_ptr<Lemon::object> num1 = Lemon::create_object("number", "10");
      std::shared_ptr<Lemon::object> num2 = Lemon::create_object("number", "20");
      std::shared_ptr<Lemon::object> result_num = num1->add(num2);
      if (result_num) {
          result_num->print();
      }

      std::shared_ptr<Lemon::object> str1 = Lemon::create_object("string", "Hello, ");
      std::shared_ptr<Lemon::object> str2 = Lemon::create_object("string", "World!");
      std::shared_ptr<Lemon::object> result_str = str1->add(str2);
      if (result_str) {
          result_str->print();
      }

    // Example of using the @class macro
    Lemon::person p1("Charlie", 35);
    p1.print();

    Lemon::circle c1(7.5);
    c1.print();

    // Example of using interfaces
    Lemon::interface_serializable* ser = &p1;
    Lemon::Log("Serialized Person: " + ser->serialize());

    Lemon::interface_cloneable* cloner = &c1;
    std::shared_ptr<Lemon::object> cloned_circle = cloner->clone();
    if (cloned_circle) {
        cloned_circle->print();
        Lemon::Log("Type of cloned object: " + cloned_circle->type_name());
    }

      // Example of the new syntax
      Lemon::func(int, my_function, (int a, int b)) {
          return a + b;
      }
      Lemon::Log(std::to_string(my_function(10, 20)));

      return 0;
  }